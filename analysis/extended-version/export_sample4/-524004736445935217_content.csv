"Content"
"    import java.awt.*;&#xD;&#xA;    import java.util.regex.PatternSyntaxException;&#xD;&#xA;    import javax.swing.*;&#xD;&#xA;    import javax.swing.event.*;&#xD;&#xA;    import javax.swing.table.*;&#xD;&#xA;    &#xD;&#xA;    public class TableFilterSorter extends JPanel {&#xD;&#xA;    &#xD;&#xA;        private boolean DEBUG = false;&#xD;&#xA;        private static final long serialVersionUID = 1L;&#xD;&#xA;    &#xD;&#xA;        public TableFilterSorter() {&#xD;&#xA;            super(new BorderLayout(5, 5));&#xD;&#xA;            final JTextField filterCpText = new JTextField();&#xD;&#xA;            filterCpText.setFont(new Font(""""Serif"""", Font.BOLD, 28));&#xD;&#xA;            filterCpText.setForeground(Color.BLUE);&#xD;&#xA;            filterCpText.setBackground(Color.LIGHT_GRAY);&#xD;&#xA;            JPanel filterCpPanel = new JPanel();&#xD;&#xA;            filterCpPanel.setLayout(new BorderLayout(5, 5));&#xD;&#xA;            filterCpPanel.setBorder(BorderFactory.createEmptyBorder(1, 1, 1, 1));&#xD;&#xA;            filterCpPanel.setBackground(Color.LIGHT_GRAY);&#xD;&#xA;            filterCpPanel.setPreferredSize(new Dimension(300, 30));&#xD;&#xA;            filterCpPanel.add(filterCpText, BorderLayout.CENTER);&#xD;&#xA;            add(filterCpPanel, BorderLayout.NORTH);&#xD;&#xA;            final JTable table = new JTable(new MyTableModel());&#xD;&#xA;            table.setPreferredScrollableViewportSize(new Dimension(500, 160));&#xD;&#xA;            table.setFillsViewportHeight(true);&#xD;&#xA;            JScrollPane scrollPane = new JScrollPane(table);&#xD;&#xA;            add(scrollPane, BorderLayout.CENTER);&#xD;&#xA;            TableModel myTableModel = table.getModel();&#xD;&#xA;            final TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(myTableModel);&#xD;&#xA;            table.setRowSorter(sorter);&#xD;&#xA;            filterCpText.getDocument().addDocumentListener(new DocumentListener() {&#xD;&#xA;    &#xD;&#xA;                private void searchFieldChangedUpdate(DocumentEvent evt) {&#xD;&#xA;                    String text = filterCpText.getText();&#xD;&#xA;                    if (text.length() == 0) {&#xD;&#xA;                        sorter.setRowFilter(null);&#xD;&#xA;                        table.clearSelection();&#xD;&#xA;                    } else {&#xD;&#xA;                        try {&#xD;&#xA;                            sorter.setRowFilter(RowFilter.regexFilter(""""(?i)"""" + text, 4));&#xD;&#xA;                            table.clearSelection();&#xD;&#xA;                        } catch (PatternSyntaxException pse) {&#xD;&#xA;                            JOptionPane.showMessageDialog(null, """"Bad regex pattern"""",&#xD;&#xA;                                    """"Bad regex pattern"""", JOptionPane.ERROR_MESSAGE);&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;    &#xD;&#xA;                @Override&#xD;&#xA;                public void insertUpdate(DocumentEvent evt) {&#xD;&#xA;                    searchFieldChangedUpdate(evt);&#xD;&#xA;                }&#xD;&#xA;    &#xD;&#xA;                @Override&#xD;&#xA;                public void removeUpdate(DocumentEvent evt) {&#xD;&#xA;                    searchFieldChangedUpdate(evt);&#xD;&#xA;                }&#xD;&#xA;    &#xD;&#xA;                @Override&#xD;&#xA;                public void changedUpdate(DocumentEvent evt) {&#xD;&#xA;                    searchFieldChangedUpdate(evt);&#xD;&#xA;                }&#xD;&#xA;            });&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        private class MyTableModel extends AbstractTableModel {&#xD;&#xA;    &#xD;&#xA;            private static final long serialVersionUID = 1L;&#xD;&#xA;            private String[] columnNames = {""""First Name"""", """"Last Name"""", """"Sport"""", """"# of Years"""", """"Vegetarian""""};&#xD;&#xA;            private Object[][] data = {&#xD;&#xA;                {""""Mary"""", """"Campione"""", """"Snowboarding"""", new Integer(5), false},&#xD;&#xA;                {""""Alison"""", """"Huml"""", """"Rowing"""", new Integer(3), true},&#xD;&#xA;                {""""Kathy"""", """"Walrath"""", """"Knitting"""", new Integer(2), false},&#xD;&#xA;                {""""Sharon"""", """"Zakhour"""", """"Speed reading"""", new Integer(20), true},&#xD;&#xA;                {""""Philip"""", """"Milne"""", """"Pool"""", new Integer(10), false},&#xD;&#xA;                {""""Mary"""", """"Campione"""", """"Snowboarding"""", new Integer(5), false},&#xD;&#xA;                {""""Alison"""", """"Huml"""", """"Rowing"""", new Integer(3), true},&#xD;&#xA;                {""""Kathy"""", """"Walrath"""", """"Knitting"""", new Integer(2), false},&#xD;&#xA;                {""""Sharon"""", """"Zakhour"""", """"Speed reading"""", new Integer(20), true},&#xD;&#xA;                {""""Philip"""", """"Milne"""", """"Pool"""", new Integer(10), false},};&#xD;&#xA;    &#xD;&#xA;            @Override&#xD;&#xA;            public int getColumnCount() {&#xD;&#xA;                return columnNames.length;&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            @Override&#xD;&#xA;            public int getRowCount() {&#xD;&#xA;                return data.length;&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            @Override&#xD;&#xA;            public String getColumnName(int col) {&#xD;&#xA;                return columnNames[col];&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            @Override&#xD;&#xA;            public Object getValueAt(int row, int col) {&#xD;&#xA;                return data[row][col];&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            @Override&#xD;&#xA;            public Class<?> getColumnClass(int c) {&#xD;&#xA;                return getValueAt(0, c).getClass();&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            @Override&#xD;&#xA;            public boolean isCellEditable(int row, int col) {&#xD;&#xA;                if (col < 2) {&#xD;&#xA;                    return false;&#xD;&#xA;                } else {&#xD;&#xA;                    return true;&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            @Override&#xD;&#xA;            public void setValueAt(Object value, int row, int col) {&#xD;&#xA;                if (DEBUG) {&#xD;&#xA;                    System.out.println(""""Setting value at """" + row + """","""" + col&#xD;&#xA;                            + """" to """" + value + """" (an instance of """" + value.getClass() + """")"""");&#xD;&#xA;                }&#xD;&#xA;                data[row][col] = value;&#xD;&#xA;                fireTableCellUpdated(row, col);&#xD;&#xA;                if (DEBUG) {&#xD;&#xA;                    System.out.println(""""New value of data:"""");&#xD;&#xA;                    printDebugData();&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;    &#xD;&#xA;            private void printDebugData() {&#xD;&#xA;                int numRows = getRowCount();&#xD;&#xA;                int numCols = getColumnCount();&#xD;&#xA;                for (int i = 0; i < numRows; i++) {&#xD;&#xA;                    System.out.print(""""    row """" + i + """":"""");&#xD;&#xA;                    for (int j = 0; j < numCols; j++) {&#xD;&#xA;                        System.out.print(""""  """" + data[i][j]);&#xD;&#xA;                    }&#xD;&#xA;                    System.out.println();&#xD;&#xA;                }&#xD;&#xA;                System.out.println(""""--------------------------"""");&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        private static void createAndShowGUI() {&#xD;&#xA;            JFrame frame = new JFrame(""""TableDemo"""");&#xD;&#xA;            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);&#xD;&#xA;            TableFilterSorter newContentPane = new TableFilterSorter();&#xD;&#xA;            newContentPane.setOpaque(true);&#xD;&#xA;            frame.setContentPane(newContentPane);&#xD;&#xA;            frame.setLocation(150, 150);&#xD;&#xA;            frame.pack();&#xD;&#xA;            frame.setVisible(true);&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        public static void main(String[] args) {&#xD;&#xA;            javax.swing.SwingUtilities.invokeLater(new Runnable() {&#xD;&#xA;    &#xD;&#xA;                @Override&#xD;&#xA;                public void run() {&#xD;&#xA;                    createAndShowGUI();&#xD;&#xA;                }&#xD;&#xA;            });&#xD;&#xA;        }&#xD;&#xA;    }"
