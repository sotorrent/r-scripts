"Content"
"    package com.services.impl;&#xD;&#xA;    &#xD;&#xA;    import java.util.ArrayList;&#xD;&#xA;    import java.util.Calendar;&#xD;&#xA;    import java.util.Collection;&#xD;&#xA;    import java.util.List;&#xD;&#xA;    &#xD;&#xA;    import org.apache.commons.logging.Log;&#xD;&#xA;    import org.apache.commons.logging.LogFactory;&#xD;&#xA;    import org.springframework.dao.DataIntegrityViolationException;&#xD;&#xA;    import org.springframework.orm.ObjectRetrievalFailureException;&#xD;&#xA;    import org.springframework.security.authentication.encoding.ShaPasswordEncoder;&#xD;&#xA;    import org.springframework.security.core.GrantedAuthority;&#xD;&#xA;    import org.springframework.security.core.authority.SimpleGrantedAuthority;&#xD;&#xA;    import org.springframework.security.core.userdetails.User;&#xD;&#xA;    import org.springframework.security.core.userdetails.UserDetails;&#xD;&#xA;    import org.springframework.security.core.userdetails.UserDetailsService;&#xD;&#xA;    import org.springframework.security.core.userdetails.UsernameNotFoundException;&#xD;&#xA;    &#xD;&#xA;    import com.bo.security.Role;&#xD;&#xA;    import com.bo.security.Utilisateur;&#xD;&#xA;    import com.boudaa.dao.exceptions.EntityNotFoundException;&#xD;&#xA;    import com.dao.RoleDao;&#xD;&#xA;    import com.dao.UtilisateurDao;&#xD;&#xA;    import com.exceptions.DuplicateLoginException;&#xD;&#xA;    import com.services.UtilisateurService;&#xD;&#xA;    &#xD;&#xA;    public class UtilisateurServiceImpl implements UtilisateurService, UserDetailsService {&#xD;&#xA;    &#xD;&#xA;    	private UtilisateurDao userDao;&#xD;&#xA;    	private RoleDao roleDao;&#xD;&#xA;    &#xD;&#xA;    	protected final Log log = LogFactory.getLog(getClass());&#xD;&#xA;    &#xD;&#xA;    	public UserDetails loadUserByUsername(String pLogin) throws UsernameNotFoundException {&#xD;&#xA;    		Utilisateur lUser = null;&#xD;&#xA;    		Collection<GrantedAuthority> arrayAuths = new ArrayList<GrantedAuthority>();&#xD;&#xA;    &#xD;&#xA;    		// On rÃ©cupÃ¨re un objet de domaine de type User ayant comme login pLogin&#xD;&#xA;    		try {&#xD;&#xA;    			lUser = userDao.getUserByLogin(pLogin);&#xD;&#xA;    &#xD;&#xA;    		} catch (ObjectRetrievalFailureException ex) {&#xD;&#xA;    			ex.printStackTrace();&#xD;&#xA;    &#xD;&#xA;    			// nous relanÃ§ons une UsernameNotFoundException si aucun utilisateur&#xD;&#xA;    			// ne correspond Ã  cet login&#xD;&#xA;    			log.debug(""""Erreur d'authentification avec le login : """" + pLogin);&#xD;&#xA;    			throw new UsernameNotFoundException(""""User """" + pLogin + """" not exists"""", ex);&#xD;&#xA;    &#xD;&#xA;    		}&#xD;&#xA;    	&#xD;&#xA;    &#xD;&#xA;    		// Si un utilisateur correspond Ã  cet identifiant, nous en profitons&#xD;&#xA;    		// pour mettre Ã  jour sa date de derniÃ¨re connexion&#xD;&#xA;    		lUser.setLastAccessDate(Calendar.getInstance().getTime());&#xD;&#xA;    		userDao.update(lUser);&#xD;&#xA;    		// Il faut ensuite rÃ©cupÃ©rer les rÃ´les de lâ€™utilisateur et les&#xD;&#xA;    		// mettre&#xD;&#xA;    		// sous la forme de SimpleGrantedAuthority, une interface propre Ã &#xD;&#xA;    		// Spring&#xD;&#xA;    		// Security*&#xD;&#xA;    &#xD;&#xA;    		Role role = lUser.getRole();&#xD;&#xA;    		arrayAuths.add(new SimpleGrantedAuthority(role.getRoleName()));&#xD;&#xA;    		// /un User (classe Spring Security) est crÃ©Ã©&#xD;&#xA;    		System.out.println(""""oui"""");&#xD;&#xA;    		return new User(pLogin, lUser.getPassword(), lUser.isEnabled(), lUser.isAccountNotExpired(), true,&#xD;&#xA;    				lUser.isAccountNotLocked(), arrayAuths);&#xD;&#xA;    	}&#xD;&#xA;    	&#xD;&#xA;    	&#xD;&#xA;    	public Utilisateur getUserByLogin(String pLogin) throws EntityNotFoundException {&#xD;&#xA;    &#xD;&#xA;    		List<Utilisateur> users;&#xD;&#xA;    		try {&#xD;&#xA;    			users = userDao.getEntityByColumn(""""Utilisateur"""", """"login"""", pLogin);&#xD;&#xA;    &#xD;&#xA;    		} catch (ObjectRetrievalFailureException ex) {&#xD;&#xA;    &#xD;&#xA;    			throw new EntityNotFoundException(""""Aucun utilisateur avec le login : """" + pLogin);&#xD;&#xA;    		}&#xD;&#xA;    &#xD;&#xA;    		if (users.size() != 1) {&#xD;&#xA;    			// TODO : Ecrire le code pour ajouter des log fatal&#xD;&#xA;    			// TODO : ecrire le code envoyant un mail d'erreur fatal Ã &#xD;&#xA;    			// l'administrateur&#xD;&#xA;    &#xD;&#xA;    			throw new RuntimeException(""""Erreur inconnue dans le systeme"""");&#xD;&#xA;    		}&#xD;&#xA;    &#xD;&#xA;    		return users.get(0);&#xD;&#xA;    	}&#xD;&#xA;    	public void addUtilisateur(Utilisateur user) throws DuplicateLoginException {&#xD;&#xA;    &#xD;&#xA;    		// pour hacher avec SHA1&#xD;&#xA;    		ShaPasswordEncoder encoder = new ShaPasswordEncoder();&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    		// Hachage du mot de passe avec un gain de sel variable = login&#xD;&#xA;    		String cryptedPassword = encoder.encodePassword(user.getPassword(),&#xD;&#xA;    				user.getLogin());&#xD;&#xA;    &#xD;&#xA;    		// affecter le mot de passe hachÃ©&#xD;&#xA;    		user.setPassword(cryptedPassword);&#xD;&#xA;    &#xD;&#xA;    		// stockage de l'utilisateur dans la base de donnÃ©es&#xD;&#xA;    		try {&#xD;&#xA;    			userDao.create(user);&#xD;&#xA;    &#xD;&#xA;    		} catch (DataIntegrityViolationException ex) {&#xD;&#xA;    			log.error(""""erreur d'ajout d'un utilisateur Ã  cause de l'exception """" + ex&#xD;&#xA;    					+ """" . un utilisateur avec le login """" + user.getLogin() + """" existe dÃ©jÃ  dans la base de donnÃ©es"""");&#xD;&#xA;    			throw new DuplicateLoginException(""""Erreur d'inscription, login existe dÃ©jÃ """", ex);&#xD;&#xA;    		}&#xD;&#xA;    &#xD;&#xA;    	}&#xD;&#xA;    &#xD;&#xA;    	public Role getRoleByName(String roleName) {&#xD;&#xA;    		return roleDao.getRoleByName(roleName);&#xD;&#xA;    	}&#xD;&#xA;    &#xD;&#xA;    	public Role getRoleById(Long pRoleId) throws EntityNotFoundException {&#xD;&#xA;    		return roleDao.findById(pRoleId);&#xD;&#xA;    	}&#xD;&#xA;    &#xD;&#xA;    	public List<Utilisateur> getAllUsers() {&#xD;&#xA;    		return userDao.getAll();&#xD;&#xA;    	}&#xD;&#xA;    &#xD;&#xA;    	public List<Role> getAllRoles() {&#xD;&#xA;    		return roleDao.getAll();&#xD;&#xA;    	}&#xD;&#xA;    &#xD;&#xA;    	public void deleteUser(Utilisateur u) throws EntityNotFoundException {&#xD;&#xA;    &#xD;&#xA;    		userDao.delete(u.getIdUtilisateur());&#xD;&#xA;    &#xD;&#xA;    	}&#xD;&#xA;    &#xD;&#xA;    	public UtilisateurDao getUserDao() {&#xD;&#xA;    		return userDao;&#xD;&#xA;    	}&#xD;&#xA;    &#xD;&#xA;    	public void setUserDao(UtilisateurDao userDao) {&#xD;&#xA;    		this.userDao = userDao;&#xD;&#xA;    	}&#xD;&#xA;    &#xD;&#xA;    	public RoleDao getRoleDao() {&#xD;&#xA;    		return roleDao;&#xD;&#xA;    	}&#xD;&#xA;    &#xD;&#xA;    	public void setRoleDao(RoleDao roleDao) {&#xD;&#xA;    		this.roleDao = roleDao;&#xD;&#xA;    	}&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    }"
