"Content"
"    public class CustomAnnotationApplicationContextProvider {&#xD;&#xA;    private final Vertx vertx;&#xD;&#xA;    public CustomAnnotationApplicationContextProvider(Vertx vertx) {&#xD;&#xA;        this.vertx = vertx;&#xD;&#xA;    }&#xD;&#xA;    /**&#xD;&#xA;     * Register all beans to spring bean factory&#xD;&#xA;     *&#xD;&#xA;     * @param beanFactory, spring bean factory to register your instances&#xD;&#xA;     */&#xD;&#xA;    private void configureBeans(ConfigurableListableBeanFactory beanFactory) {&#xD;&#xA;        beanFactory.registerSingleton(""""vertx"""", vertx);&#xD;&#xA;    }&#xD;&#xA;    /**&#xD;&#xA;     * Proxy method to create {@link AnnotationConfigApplicationContext} instance with no params&#xD;&#xA;     *&#xD;&#xA;     * @return {@link AnnotationConfigApplicationContext} instance&#xD;&#xA;     */&#xD;&#xA;    public AnnotationConfigApplicationContext get() {&#xD;&#xA;        return new AnnotationConfigApplicationContext() {&#xD;&#xA;            @Override&#xD;&#xA;            protected void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {&#xD;&#xA;                super.postProcessBeanFactory(beanFactory);&#xD;&#xA;                configureBeans(beanFactory);&#xD;&#xA;            }&#xD;&#xA;        };&#xD;&#xA;    }&#xD;&#xA;    /**&#xD;&#xA;     * Proxy method to call {@link AnnotationConfigApplicationContext#AnnotationConfigApplicationContext(DefaultListableBeanFactory)} with our logic&#xD;&#xA;     *&#xD;&#xA;     * @param beanFactory bean factory for spring&#xD;&#xA;     * @return&#xD;&#xA;     * @see AnnotationConfigApplicationContext#AnnotationConfigApplicationContext(DefaultListableBeanFactory)&#xD;&#xA;     */&#xD;&#xA;    public AnnotationConfigApplicationContext get(DefaultListableBeanFactory beanFactory) {&#xD;&#xA;        return new AnnotationConfigApplicationContext(beanFactory) {&#xD;&#xA;            @Override&#xD;&#xA;            protected void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {&#xD;&#xA;                super.postProcessBeanFactory(beanFactory);&#xD;&#xA;                configureBeans(beanFactory);&#xD;&#xA;            }&#xD;&#xA;        };&#xD;&#xA;    }&#xD;&#xA;    /**&#xD;&#xA;     * Proxy method to call {@link AnnotationConfigApplicationContext#AnnotationConfigApplicationContext(Class[])} with our logic&#xD;&#xA;     *&#xD;&#xA;     * @param annotatedClasses, set of annotated classes for spring&#xD;&#xA;     * @return&#xD;&#xA;     * @see AnnotationConfigApplicationContext#AnnotationConfigApplicationContext(Class[])&#xD;&#xA;     */&#xD;&#xA;    public AnnotationConfigApplicationContext get(Class<?>... annotatedClasses) {&#xD;&#xA;        return new AnnotationConfigApplicationContext(annotatedClasses) {&#xD;&#xA;            @Override&#xD;&#xA;            protected void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {&#xD;&#xA;                super.postProcessBeanFactory(beanFactory);&#xD;&#xA;                configureBeans(beanFactory);&#xD;&#xA;            }&#xD;&#xA;        };&#xD;&#xA;    }&#xD;&#xA;    /**&#xD;&#xA;     * proxy method to call {@link AnnotationConfigApplicationContext#AnnotationConfigApplicationContext(String...)} with our logic&#xD;&#xA;     *&#xD;&#xA;     * @param basePackages set of base packages for spring&#xD;&#xA;     * @return&#xD;&#xA;     * @see AnnotationConfigApplicationContext#AnnotationConfigApplicationContext(String...)&#xD;&#xA;     */&#xD;&#xA;    public AnnotationConfigApplicationContext get(String... basePackages) {&#xD;&#xA;        return new AnnotationConfigApplicationContext(basePackages) {&#xD;&#xA;            @Override&#xD;&#xA;            protected void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {&#xD;&#xA;                super.postProcessBeanFactory(beanFactory);&#xD;&#xA;                configureBeans(beanFactory);&#xD;&#xA;            }&#xD;&#xA;        };&#xD;&#xA;    }&#xD;&#xA;    }"
