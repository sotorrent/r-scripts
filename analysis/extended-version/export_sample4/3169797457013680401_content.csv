"Content"
"    #ifndef __cplusplus&#xD;&#xA;        #define _GNU_SOURCE&#xD;&#xA;    #endif&#xD;&#xA;    &#xD;&#xA;    #include <unistd.h>&#xD;&#xA;    #include <dirent.h>&#xD;&#xA;    #include <sys/types.h> // for opendir(), readdir(), closedir()&#xD;&#xA;    #include <sys/stat.h> // for stat()&#xD;&#xA;    &#xD;&#xA;    #ifdef __cplusplus&#xD;&#xA;        #include <iostream>&#xD;&#xA;        #include <cstdlib>&#xD;&#xA;        #include <cstring>&#xD;&#xA;        #include <cstdarg>&#xD;&#xA;    #else&#xD;&#xA;        #include <stdio.h>&#xD;&#xA;        #include <stdlib.h>&#xD;&#xA;        #include <string.h>&#xD;&#xA;        #include <stdarg.h>&#xD;&#xA;    #endif&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    #define PROC_DIRECTORY """"/proc/""""&#xD;&#xA;    #define CASE_SENSITIVE    1&#xD;&#xA;    #define CASE_INSENSITIVE  0&#xD;&#xA;    #define EXACT_MATCH       1&#xD;&#xA;    #define INEXACT_MATCH     0&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    int IsNumeric(const char* ccharptr_CharacterList)&#xD;&#xA;    {&#xD;&#xA;        for ( ; *ccharptr_CharacterList; ccharptr_CharacterList++)&#xD;&#xA;            if (*ccharptr_CharacterList < '0' || *ccharptr_CharacterList > '9')&#xD;&#xA;                return 0; // false&#xD;&#xA;        return 1; // true&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    int strcmp_Wrapper(const char *s1, const char *s2, int intCaseSensitive)&#xD;&#xA;    {&#xD;&#xA;        if (intCaseSensitive)&#xD;&#xA;            return !strcmp(s1, s2);&#xD;&#xA;        else&#xD;&#xA;            return !strcasecmp(s1, s2);&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    int strstr_Wrapper(const char* haystack, const char* needle, int intCaseSensitive)&#xD;&#xA;    {&#xD;&#xA;        if (intCaseSensitive)&#xD;&#xA;            return (int) strstr(haystack, needle);&#xD;&#xA;        else&#xD;&#xA;            return (int) strcasestr(haystack, needle);&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;    #ifdef __cplusplus&#xD;&#xA;    pid_t GetPIDbyName(const char* cchrptr_ProcessName, int intCaseSensitiveness, int intExactMatch)&#xD;&#xA;    #else&#xD;&#xA;    pid_t GetPIDbyName_implements(const char* cchrptr_ProcessName, int intCaseSensitiveness, int intExactMatch)&#xD;&#xA;    #endif&#xD;&#xA;    {&#xD;&#xA;        char chrarry_CommandLinePath[100]  ;&#xD;&#xA;        char chrarry_NameOfProcess[300]  ;&#xD;&#xA;        char* chrptr_StringToCompare = NULL ;&#xD;&#xA;        pid_t pid_ProcessIdentifier = (pid_t) -1 ;&#xD;&#xA;        struct dirent* de_DirEntity = NULL ;&#xD;&#xA;        DIR* dir_proc = NULL ;&#xD;&#xA;    &#xD;&#xA;        int (*CompareFunction) (const char*, const char*, int) ;&#xD;&#xA;    &#xD;&#xA;        if (intExactMatch)&#xD;&#xA;            CompareFunction = &strcmp_Wrapper;&#xD;&#xA;        else&#xD;&#xA;            CompareFunction = &strstr_Wrapper;&#xD;&#xA;    &#xD;&#xA;    &#xD;&#xA;        dir_proc = opendir(PROC_DIRECTORY) ;&#xD;&#xA;        if (dir_proc == NULL)&#xD;&#xA;        {&#xD;&#xA;            perror(""""Couldn't open the """" PROC_DIRECTORY """" directory"""") ;&#xD;&#xA;            return (pid_t) -2 ;&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        // Loop while not NULL&#xD;&#xA;        while ( (de_DirEntity = readdir(dir_proc)) )&#xD;&#xA;        {&#xD;&#xA;            if (de_DirEntity->d_type == DT_DIR)&#xD;&#xA;            {&#xD;&#xA;                if (IsNumeric(de_DirEntity->d_name))&#xD;&#xA;                {&#xD;&#xA;                    strcpy(chrarry_CommandLinePath, PROC_DIRECTORY) ;&#xD;&#xA;                    strcat(chrarry_CommandLinePath, de_DirEntity->d_name) ;&#xD;&#xA;                    strcat(chrarry_CommandLinePath, """"/cmdline"""") ;&#xD;&#xA;                    FILE* fd_CmdLineFile = fopen (chrarry_CommandLinePath, """"rt"""") ;  // open the file for reading text&#xD;&#xA;                    if (fd_CmdLineFile)&#xD;&#xA;                    {&#xD;&#xA;                        fscanf(fd_CmdLineFile, """"%s"""", chrarry_NameOfProcess) ; // read from /proc/<NR>/cmdline&#xD;&#xA;                        fclose(fd_CmdLineFile);  // close the file prior to exiting the routine&#xD;&#xA;    &#xD;&#xA;                        if (strrchr(chrarry_NameOfProcess, '/'))&#xD;&#xA;                            chrptr_StringToCompare = strrchr(chrarry_NameOfProcess, '/') +1 ;&#xD;&#xA;                        else&#xD;&#xA;                            chrptr_StringToCompare = chrarry_NameOfProcess ;&#xD;&#xA;    &#xD;&#xA;                        //printf(""""Process name: %s\n"""", chrarry_NameOfProcess);&#xD;&#xA;                        //printf(""""Pure Process name: %s\n"""", chrptr_StringToCompare );&#xD;&#xA;    &#xD;&#xA;                        if ( CompareFunction(chrptr_StringToCompare, cchrptr_ProcessName, intCaseSensitiveness) )&#xD;&#xA;                        {&#xD;&#xA;                            pid_ProcessIdentifier = (pid_t) atoi(de_DirEntity->d_name) ;&#xD;&#xA;                            closedir(dir_proc) ;&#xD;&#xA;                            return pid_ProcessIdentifier ;&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        closedir(dir_proc) ;&#xD;&#xA;        return pid_ProcessIdentifier ;&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    #ifdef __cplusplus&#xD;&#xA;        pid_t GetPIDbyName(const char* cchrptr_ProcessName)&#xD;&#xA;        {&#xD;&#xA;            return GetPIDbyName(cchrptr_ProcessName, CASE_INSENSITIVE, EXACT_MATCH) ;&#xD;&#xA;        }&#xD;&#xA;    #else&#xD;&#xA;        // C cannot overload functions - fixed&#xD;&#xA;        pid_t GetPIDbyName_Wrapper(const char* cchrptr_ProcessName, ... )&#xD;&#xA;        {&#xD;&#xA;            int intTempArgument ;&#xD;&#xA;            int intInputArguments[2] ;&#xD;&#xA;            // intInputArguments[0] = 0 ;&#xD;&#xA;            // intInputArguments[1] = 0 ;&#xD;&#xA;            memset(intInputArguments, 0, sizeof(intInputArguments) ) ;&#xD;&#xA;            int intInputIndex ;&#xD;&#xA;            va_list argptr;&#xD;&#xA;    &#xD;&#xA;            va_start( argptr, cchrptr_ProcessName );&#xD;&#xA;                for (intInputIndex = 0;  (intTempArgument = va_arg( argptr, int )) != 15; ++intInputIndex)&#xD;&#xA;                {&#xD;&#xA;                    intInputArguments[intInputIndex] = intTempArgument ;&#xD;&#xA;                }&#xD;&#xA;            va_end( argptr );&#xD;&#xA;            return GetPIDbyName_implements(cchrptr_ProcessName, intInputArguments[0], intInputArguments[1]);&#xD;&#xA;        }&#xD;&#xA;    &#xD;&#xA;        #define GetPIDbyName(ProcessName,...) GetPIDbyName_Wrapper(ProcessName, ##__VA_ARGS__, (int) 15)&#xD;&#xA;    &#xD;&#xA;    #endif&#xD;&#xA;    &#xD;&#xA;    int main()&#xD;&#xA;    {&#xD;&#xA;        pid_t pid = GetPIDbyName(""""bash"""") ; // If -1 = not found, if -2 = proc fs access error&#xD;&#xA;        printf(""""PID %d\n"""", pid);&#xD;&#xA;        return EXIT_SUCCESS ;&#xD;&#xA;    }"
